import { Directive, ElementRef, HostListener, Optional, Self } from '@angular/core';
import { CreditCard } from '../credit-card';
import { NgControl } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/forms';
export class CvcFormatDirective {
    constructor(el, control) {
        this.el = el;
        this.control = control;
        this.target = this.el.nativeElement;
    }
    /**
     * Updates the value to target element, or FormControl if exists.
     * @param value New input value.
     */
    updateValue(value) {
        if (this.control) {
            this.control.control.setValue(value);
        }
        else {
            this.target.value = value;
        }
    }
    onKeypress(e) {
        if (!CreditCard.restrictNumeric(e) && !CreditCard.restrictCvc(e.which, this.target)) {
            e.preventDefault();
        }
    }
    reformatCvc() {
        const val = CreditCard.replaceFullWidthChars(this.target.value)
            .replace(/\D/g, '')
            .slice(0, 4);
        const oldVal = this.target.value;
        if (val !== oldVal) {
            this.target.selectionStart = this.target.selectionEnd = CreditCard.safeVal(val, this.target, (safeVal => {
                this.updateValue(safeVal);
            }));
        }
    }
}
CvcFormatDirective.ɵfac = function CvcFormatDirective_Factory(t) { return new (t || CvcFormatDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 10)); };
CvcFormatDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CvcFormatDirective, selectors: [["", "ccCVC", ""]], hostBindings: function CvcFormatDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keypress", function CvcFormatDirective_keypress_HostBindingHandler($event) { return ctx.onKeypress($event); })("paste", function CvcFormatDirective_paste_HostBindingHandler() { return ctx.reformatCvc(); })("change", function CvcFormatDirective_change_HostBindingHandler() { return ctx.reformatCvc(); })("input", function CvcFormatDirective_input_HostBindingHandler() { return ctx.reformatCvc(); });
    } } });
CvcFormatDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: NgControl, decorators: [{ type: Self }, { type: Optional }] }
];
CvcFormatDirective.propDecorators = {
    onKeypress: [{ type: HostListener, args: ['keypress', ['$event'],] }],
    reformatCvc: [{ type: HostListener, args: ['paste',] }, { type: HostListener, args: ['change',] }, { type: HostListener, args: ['input',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CvcFormatDirective, [{
        type: Directive,
        args: [{
                selector: '[ccCVC]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.NgControl, decorators: [{
                type: Self
            }, {
                type: Optional
            }] }]; }, { onKeypress: [{
            type: HostListener,
            args: ['keypress', ['$event']]
        }], reformatCvc: [{
            type: HostListener,
            args: ['paste']
        }, {
            type: HostListener,
            args: ['change']
        }, {
            type: HostListener,
            args: ['input']
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3ZjLWZvcm1hdC5kaXJlY3RpdmUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXItY2MtbGlicmFyeS9zcmMvbGliL2RpcmVjdGl2ZXMvY3ZjLWZvcm1hdC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDcEYsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzVDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7O0FBSzNDLE1BQU0sT0FBTyxrQkFBa0I7QUFDL0IsSUFFRSxZQUNVLEVBQWMsRUFDTSxPQUFrQjtBQUNoRCxRQUZVLE9BQUUsR0FBRixFQUFFLENBQVk7QUFBQyxRQUNLLFlBQU8sR0FBUCxPQUFPLENBQVc7QUFBQyxRQUUvQyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDO0FBQ3hDLElBQUUsQ0FBQztBQUNILElBQ0U7QUFDRjtBQUNFO0FBQ0UsT0FBQztBQUNMLElBQVUsV0FBVyxDQUFDLEtBQWE7QUFDbkMsUUFBSSxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7QUFDdEIsWUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDM0MsU0FBSztBQUFDLGFBQUs7QUFDWCxZQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztBQUNoQyxTQUFLO0FBQ0wsSUFBRSxDQUFDO0FBQ0gsSUFFUyxVQUFVLENBQUMsQ0FBZ0I7QUFDcEMsUUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUU7QUFDekYsWUFBTSxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7QUFDekIsU0FBSztBQUNMLElBQUUsQ0FBQztBQUNILElBSVMsV0FBVztBQUNwQixRQUFJLE1BQU0sR0FBRyxHQUFHLFVBQVUsQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQztBQUNuRSxhQUFPLE9BQU8sQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDO0FBQ3pCLGFBQU8sS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNuQixRQUFJLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO0FBQ3JDLFFBQUksSUFBSSxHQUFHLEtBQUssTUFBTSxFQUFFO0FBQ3hCLFlBQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLEdBQUcsVUFBVSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFO0FBQzlHLGdCQUFRLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDbEMsWUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ1YsU0FBSztBQUNMLElBQUUsQ0FBQztBQUNIOzhDQTlDQyxTQUFTLFNBQUMsa0JBQ1QsUUFBUSxFQUFFLFNBQVMsZUFDcEI7OztXQUNJO0FBQUM7QUFDVSxZQVJJLFVBQVU7QUFBSSxZQUV6QixTQUFTLHVCQVViLElBQUksWUFBSSxRQUFRO0FBQU07QUFBRztBQUVwQix5QkFlUCxZQUFZLFNBQUMsVUFBVSxFQUFFLENBQUMsUUFBUSxDQUFDO0FBQ2pDLDBCQU1GLFlBQVksU0FBQyxPQUFPLGNBQ3BCLFlBQVksU0FBQyxRQUFRLGNBQ3JCLFlBQVksU0FBQyxPQUFPO0FBQ25COzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEhvc3RMaXN0ZW5lciwgT3B0aW9uYWwsIFNlbGYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENyZWRpdENhcmQgfSBmcm9tICcuLi9jcmVkaXQtY2FyZCc7XG5pbXBvcnQgeyBOZ0NvbnRyb2wgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tjY0NWQ10nLFxufSlcbmV4cG9ydCBjbGFzcyBDdmNGb3JtYXREaXJlY3RpdmUge1xuICBwcml2YXRlIHRhcmdldDogSFRNTElucHV0RWxlbWVudDtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGVsOiBFbGVtZW50UmVmLFxuICAgIEBTZWxmKCkgQE9wdGlvbmFsKCkgcHJpdmF0ZSBjb250cm9sOiBOZ0NvbnRyb2wsXG4gICkge1xuICAgIHRoaXMudGFyZ2V0ID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50O1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdGhlIHZhbHVlIHRvIHRhcmdldCBlbGVtZW50LCBvciBGb3JtQ29udHJvbCBpZiBleGlzdHMuXG4gICAqIEBwYXJhbSB2YWx1ZSBOZXcgaW5wdXQgdmFsdWUuXG4gICAqL1xuICBwcml2YXRlIHVwZGF0ZVZhbHVlKHZhbHVlOiBzdHJpbmcpIHtcbiAgICBpZiAodGhpcy5jb250cm9sKSB7XG4gICAgICB0aGlzLmNvbnRyb2wuY29udHJvbC5zZXRWYWx1ZSh2YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudGFyZ2V0LnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcigna2V5cHJlc3MnLCBbJyRldmVudCddKVxuICBwdWJsaWMgb25LZXlwcmVzcyhlOiBLZXlib2FyZEV2ZW50KSB7XG4gICAgaWYgKCFDcmVkaXRDYXJkLnJlc3RyaWN0TnVtZXJpYyhlKSAmJiAhQ3JlZGl0Q2FyZC5yZXN0cmljdEN2YyhlLndoaWNoLCB0aGlzLnRhcmdldCkpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdwYXN0ZScpXG4gIEBIb3N0TGlzdGVuZXIoJ2NoYW5nZScpXG4gIEBIb3N0TGlzdGVuZXIoJ2lucHV0JylcbiAgcHVibGljIHJlZm9ybWF0Q3ZjKCkge1xuICAgIGNvbnN0IHZhbCA9IENyZWRpdENhcmQucmVwbGFjZUZ1bGxXaWR0aENoYXJzKHRoaXMudGFyZ2V0LnZhbHVlKVxuICAgICAgLnJlcGxhY2UoL1xcRC9nLCAnJylcbiAgICAgIC5zbGljZSgwLCA0KTtcbiAgICBjb25zdCBvbGRWYWwgPSB0aGlzLnRhcmdldC52YWx1ZTtcbiAgICBpZiAodmFsICE9PSBvbGRWYWwpIHtcbiAgICAgIHRoaXMudGFyZ2V0LnNlbGVjdGlvblN0YXJ0ID0gdGhpcy50YXJnZXQuc2VsZWN0aW9uRW5kID0gQ3JlZGl0Q2FyZC5zYWZlVmFsKHZhbCwgdGhpcy50YXJnZXQsIChzYWZlVmFsID0+IHtcbiAgICAgICAgdGhpcy51cGRhdGVWYWx1ZShzYWZlVmFsKTtcbiAgICAgIH0pKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==