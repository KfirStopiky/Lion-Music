import { Directive, ElementRef, HostListener, Optional, Self } from '@angular/core';
import { CreditCard } from '../credit-card';
import { NgControl } from '@angular/forms';
import { BehaviorSubject } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/forms';
export class CreditCardFormatDirective {
    constructor(el, control) {
        this.el = el;
        this.control = control;
        this.cards = CreditCard.cards();
        this.resolvedScheme$ = new BehaviorSubject('unknown');
        this.target = this.el.nativeElement;
    }
    /**
     * Updates the value to target element, or FormControl if exists.
     * @param value New input value.
     */
    updateValue(value) {
        if (this.control) {
            this.control.control.setValue(value);
        }
        else {
            this.target.value = value;
        }
    }
    onKeypress(e) {
        if (CreditCard.restrictNumeric(e)) {
            if (CreditCard.isCardNumber(e.which, this.target)) {
                this.formatCardNumber(e);
            }
        }
        else {
            e.preventDefault();
        }
    }
    onKeydown(e) {
        this.formatBackCardNumber(e);
        this.reFormatCardNumber();
    }
    onKeyup() {
        this.setCardType();
    }
    onPaste() {
        this.reFormatCardNumber();
    }
    onChange() {
        this.reFormatCardNumber();
    }
    onInput() {
        this.reFormatCardNumber();
        this.setCardType();
    }
    formatCardNumber(e) {
        const digit = String.fromCharCode(e.which);
        if (!/^\d+$/.test(digit)) {
            return;
        }
        const value = this.target.value;
        const card = CreditCard.cardFromNumber(value + digit);
        const length = (value.replace(/\D/g, '') + digit).length;
        const upperLength = card ? card.length[card.length.length - 1] : 19;
        if (length >= upperLength) {
            return;
        }
    }
    formatBackCardNumber(e) {
        const value = this.target.value;
        const selStart = this.target.selectionStart;
        if (e.which !== 8) {
            return;
        }
        if (selStart != null
            && selStart === this.target.selectionEnd
            && selStart > 0
            && selStart !== value.length
            && value[selStart - 1] === ' ') {
            e.preventDefault();
            if (selStart <= 2) {
                this.updateValue(value.slice(selStart));
                this.target.selectionStart = 0;
                this.target.selectionEnd = 0;
            }
            else {
                this.updateValue(value.slice(0, selStart - 2) + value.slice(selStart));
                this.target.selectionStart = selStart - 2;
                this.target.selectionEnd = selStart - 2;
            }
        }
    }
    setCardType() {
        const cardType = CreditCard.cardType(this.target.value) || 'unknown';
        this.resolvedScheme$.next(cardType);
        if (!this.target.classList.contains(cardType)) {
            this.cards.forEach((card) => {
                this.target.classList.remove(card.type);
            });
            this.target.classList.remove('unknown');
            this.target.classList.add(cardType);
            this.target.classList.toggle('identified', cardType !== 'unknown');
        }
    }
    reFormatCardNumber() {
        const value = CreditCard.formatCardNumber(CreditCard.replaceFullWidthChars(this.target.value));
        const oldValue = this.target.value;
        if (value !== oldValue) {
            this.target.selectionStart = this.target.selectionEnd = CreditCard.safeVal(value, this.target, (safeVal => {
                this.updateValue(safeVal);
            }));
        }
    }
}
CreditCardFormatDirective.ɵfac = function CreditCardFormatDirective_Factory(t) { return new (t || CreditCardFormatDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 10)); };
CreditCardFormatDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CreditCardFormatDirective, selectors: [["", "ccNumber", ""]], hostBindings: function CreditCardFormatDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keypress", function CreditCardFormatDirective_keypress_HostBindingHandler($event) { return ctx.onKeypress($event); })("keydown", function CreditCardFormatDirective_keydown_HostBindingHandler($event) { return ctx.onKeydown($event); })("keyup", function CreditCardFormatDirective_keyup_HostBindingHandler() { return ctx.onKeyup(); })("paste", function CreditCardFormatDirective_paste_HostBindingHandler() { return ctx.onPaste(); })("change", function CreditCardFormatDirective_change_HostBindingHandler() { return ctx.onChange(); })("input", function CreditCardFormatDirective_input_HostBindingHandler() { return ctx.onInput(); });
    } }, exportAs: ["ccNumber"] });
CreditCardFormatDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: NgControl, decorators: [{ type: Self }, { type: Optional }] }
];
CreditCardFormatDirective.propDecorators = {
    onKeypress: [{ type: HostListener, args: ['keypress', ['$event'],] }],
    onKeydown: [{ type: HostListener, args: ['keydown', ['$event'],] }],
    onKeyup: [{ type: HostListener, args: ['keyup',] }],
    onPaste: [{ type: HostListener, args: ['paste',] }],
    onChange: [{ type: HostListener, args: ['change',] }],
    onInput: [{ type: HostListener, args: ['input',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CreditCardFormatDirective, [{
        type: Directive,
        args: [{
                selector: '[ccNumber]',
                exportAs: 'ccNumber'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.NgControl, decorators: [{
                type: Self
            }, {
                type: Optional
            }] }]; }, { onKeypress: [{
            type: HostListener,
            args: ['keypress', ['$event']]
        }], onKeydown: [{
            type: HostListener,
            args: ['keydown', ['$event']]
        }], onKeyup: [{
            type: HostListener,
            args: ['keyup']
        }], onPaste: [{
            type: HostListener,
            args: ['paste']
        }], onChange: [{
            type: HostListener,
            args: ['change']
        }], onInput: [{
            type: HostListener,
            args: ['input']
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlZGl0LWNhcmQtZm9ybWF0LmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vcHJvamVjdHMvYW5ndWxhci1jYy1saWJyYXJ5L3NyYy9saWIvZGlyZWN0aXZlcy9jcmVkaXQtY2FyZC1mb3JtYXQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3BGLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM1QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDM0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7O0FBTXZDLE1BQU0sT0FBTyx5QkFBeUI7QUFDdEMsSUFLRSxZQUNVLEVBQWMsRUFDTSxPQUFrQjtBQUNoRCxRQUZVLE9BQUUsR0FBRixFQUFFLENBQVk7QUFBQyxRQUNLLFlBQU8sR0FBUCxPQUFPLENBQVc7QUFBQyxRQU56QyxVQUFLLEdBQUcsVUFBVSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ3JDLFFBQ1Msb0JBQWUsR0FBRyxJQUFJLGVBQWUsQ0FBUyxTQUFTLENBQUMsQ0FBQztBQUNsRSxRQUtJLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUM7QUFDeEMsSUFBRSxDQUFDO0FBQ0gsSUFDRTtBQUNGO0FBQ0U7QUFDRSxPQUFDO0FBQ0wsSUFBVSxXQUFXLENBQUMsS0FBYTtBQUNuQyxRQUFJLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtBQUN0QixZQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUMzQyxTQUFLO0FBQUMsYUFBSztBQUNYLFlBQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0FBQ2hDLFNBQUs7QUFDTCxJQUFFLENBQUM7QUFDSCxJQUVTLFVBQVUsQ0FBQyxDQUFnQjtBQUNwQyxRQUFJLElBQUksVUFBVSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsRUFBRTtBQUN2QyxZQUFNLElBQUksVUFBVSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRTtBQUN6RCxnQkFBUSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakMsYUFBTztBQUNQLFNBQUs7QUFBQyxhQUFLO0FBQ1gsWUFBTSxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7QUFDekIsU0FBSztBQUNMLElBQUUsQ0FBQztBQUNILElBRVMsU0FBUyxDQUFDLENBQWdCO0FBQ25DLFFBQUksSUFBSSxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2pDLFFBQUksSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7QUFDOUIsSUFBRSxDQUFDO0FBQ0gsSUFFUyxPQUFPO0FBQ2hCLFFBQUksSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQ3ZCLElBQUUsQ0FBQztBQUNILElBRVMsT0FBTztBQUNoQixRQUFJLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO0FBQzlCLElBQUUsQ0FBQztBQUNILElBRVMsUUFBUTtBQUNqQixRQUFJLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO0FBQzlCLElBQUUsQ0FBQztBQUNILElBRVMsT0FBTztBQUNoQixRQUFJLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO0FBQzlCLFFBQUksSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQ3ZCLElBQUUsQ0FBQztBQUNILElBQ1UsZ0JBQWdCLENBQUMsQ0FBZ0I7QUFDM0MsUUFBSSxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUMvQyxRQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQzlCLFlBQU0sT0FBTztBQUNiLFNBQUs7QUFDTCxRQUNJLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO0FBQ3BDLFFBQUksTUFBTSxJQUFJLEdBQUcsVUFBVSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLENBQUM7QUFDMUQsUUFBSSxNQUFNLE1BQU0sR0FBRyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLE1BQU0sQ0FBQztBQUM3RCxRQUFJLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0FBQ3hFLFFBQ0ksSUFBSSxNQUFNLElBQUksV0FBVyxFQUFFO0FBQy9CLFlBQU0sT0FBTztBQUNiLFNBQUs7QUFDTCxJQUFFLENBQUM7QUFDSCxJQUNVLG9CQUFvQixDQUFDLENBQWdCO0FBQy9DLFFBQUksTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7QUFDcEMsUUFBSSxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQztBQUNoRCxRQUNJLElBQUksQ0FBQyxDQUFDLEtBQUssS0FBSyxDQUFDLEVBQUU7QUFDdkIsWUFBTSxPQUFPO0FBQ2IsU0FBSztBQUNMLFFBQ0ksSUFBSSxRQUFRLElBQUksSUFBSTtBQUN4QixlQUFTLFFBQVEsS0FBSyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVk7QUFDOUMsZUFBUyxRQUFRLEdBQUcsQ0FBQztBQUNyQixlQUFTLFFBQVEsS0FBSyxLQUFLLENBQUMsTUFBTTtBQUNsQyxlQUFTLEtBQUssQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLEtBQUssR0FBRyxFQUFFO0FBQ3RDLFlBQU0sQ0FBQyxDQUFDLGNBQWMsRUFBRSxDQUFDO0FBQ3pCLFlBQU0sSUFBSSxRQUFRLElBQUksQ0FBQyxFQUFFO0FBQ3pCLGdCQUFRLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0FBQ2hELGdCQUFRLElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxHQUFHLENBQUMsQ0FBQztBQUN2QyxnQkFBUSxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksR0FBRyxDQUFDLENBQUM7QUFDckMsYUFBTztBQUFDLGlCQUFLO0FBQ2IsZ0JBQVEsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxRQUFRLEdBQUcsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0FBQy9FLGdCQUFRLElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxHQUFHLFFBQVEsR0FBRyxDQUFDLENBQUM7QUFDbEQsZ0JBQVEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLEdBQUcsUUFBUSxHQUFHLENBQUMsQ0FBQztBQUNoRCxhQUFPO0FBQ1AsU0FBSztBQUNMLElBQUUsQ0FBQztBQUNILElBQ1UsV0FBVztBQUNyQixRQUFJLE1BQU0sUUFBUSxHQUFHLFVBQVUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxTQUFTLENBQUM7QUFDekUsUUFDSSxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUN4QyxRQUNJLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEVBQUU7QUFDbkQsWUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO0FBQ2xDLGdCQUFRLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDaEQsWUFBTSxDQUFDLENBQUMsQ0FBQztBQUNULFlBQ00sSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQzlDLFlBQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzFDLFlBQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxRQUFRLEtBQUssU0FBUyxDQUFDLENBQUM7QUFDekUsU0FBSztBQUNMLElBQUUsQ0FBQztBQUNILElBQ1Usa0JBQWtCO0FBQzVCLFFBQUksTUFBTSxLQUFLLEdBQUcsVUFBVSxDQUFDLGdCQUFnQixDQUN2QyxVQUFVLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FDcEQsQ0FBQztBQUNOLFFBQUksTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7QUFDdkMsUUFBSSxJQUFJLEtBQUssS0FBSyxRQUFRLEVBQUU7QUFDNUIsWUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksR0FBRyxVQUFVLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsT0FBTyxDQUFDLEVBQUU7QUFDaEgsZ0JBQVEsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNsQyxZQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDVixTQUFLO0FBQ0wsSUFBRSxDQUFDO0FBQ0g7cURBeElDLFNBQVMsU0FBQyxrQkFDVCxRQUFRLEVBQUUsWUFBWSxrQkFDdEIsUUFBUSxFQUFFLFVBQVUsZUFDckI7OzttQ0FDSTtBQUFDO0FBQ1UsWUFWSSxVQUFVO0FBQUksWUFFekIsU0FBUyx1QkFlYixJQUFJLFlBQUksUUFBUTtBQUFNO0FBQUc7QUFFYix5QkFlZCxZQUFZLFNBQUMsVUFBVSxFQUFFLENBQUMsUUFBUSxDQUFDO0FBQ2pDLHdCQVVGLFlBQVksU0FBQyxTQUFTLEVBQUUsQ0FBQyxRQUFRLENBQUM7QUFDaEMsc0JBS0YsWUFBWSxTQUFDLE9BQU87QUFDbEIsc0JBSUYsWUFBWSxTQUFDLE9BQU87QUFDbEIsdUJBSUYsWUFBWSxTQUFDLFFBQVE7QUFDbkIsc0JBSUYsWUFBWSxTQUFDLE9BQU87QUFDbkI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEhvc3RMaXN0ZW5lciwgT3B0aW9uYWwsIFNlbGYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENyZWRpdENhcmQgfSBmcm9tICcuLi9jcmVkaXQtY2FyZCc7XG5pbXBvcnQgeyBOZ0NvbnRyb2wgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2NjTnVtYmVyXScsXG4gIGV4cG9ydEFzOiAnY2NOdW1iZXInLFxufSlcbmV4cG9ydCBjbGFzcyBDcmVkaXRDYXJkRm9ybWF0RGlyZWN0aXZlIHtcbiAgcHJpdmF0ZSB0YXJnZXQ6IEhUTUxJbnB1dEVsZW1lbnQ7XG4gIHByaXZhdGUgY2FyZHMgPSBDcmVkaXRDYXJkLmNhcmRzKCk7XG5cbiAgcHVibGljIHJlc29sdmVkU2NoZW1lJCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8c3RyaW5nPigndW5rbm93bicpO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsXG4gICAgQFNlbGYoKSBAT3B0aW9uYWwoKSBwcml2YXRlIGNvbnRyb2w6IE5nQ29udHJvbCxcbiAgKSB7XG4gICAgdGhpcy50YXJnZXQgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQ7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlcyB0aGUgdmFsdWUgdG8gdGFyZ2V0IGVsZW1lbnQsIG9yIEZvcm1Db250cm9sIGlmIGV4aXN0cy5cbiAgICogQHBhcmFtIHZhbHVlIE5ldyBpbnB1dCB2YWx1ZS5cbiAgICovXG4gIHByaXZhdGUgdXBkYXRlVmFsdWUodmFsdWU6IHN0cmluZykge1xuICAgIGlmICh0aGlzLmNvbnRyb2wpIHtcbiAgICAgIHRoaXMuY29udHJvbC5jb250cm9sLnNldFZhbHVlKHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy50YXJnZXQudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdrZXlwcmVzcycsIFsnJGV2ZW50J10pXG4gIHB1YmxpYyBvbktleXByZXNzKGU6IEtleWJvYXJkRXZlbnQpIHtcbiAgICBpZiAoQ3JlZGl0Q2FyZC5yZXN0cmljdE51bWVyaWMoZSkpIHtcbiAgICAgIGlmIChDcmVkaXRDYXJkLmlzQ2FyZE51bWJlcihlLndoaWNoLCB0aGlzLnRhcmdldCkpIHtcbiAgICAgICAgdGhpcy5mb3JtYXRDYXJkTnVtYmVyKGUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcigna2V5ZG93bicsIFsnJGV2ZW50J10pXG4gIHB1YmxpYyBvbktleWRvd24oZTogS2V5Ym9hcmRFdmVudCkge1xuICAgIHRoaXMuZm9ybWF0QmFja0NhcmROdW1iZXIoZSk7XG4gICAgdGhpcy5yZUZvcm1hdENhcmROdW1iZXIoKTtcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2tleXVwJylcbiAgcHVibGljIG9uS2V5dXAoKSB7XG4gICAgdGhpcy5zZXRDYXJkVHlwZSgpO1xuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcigncGFzdGUnKVxuICBwdWJsaWMgb25QYXN0ZSgpIHtcbiAgICB0aGlzLnJlRm9ybWF0Q2FyZE51bWJlcigpO1xuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignY2hhbmdlJylcbiAgcHVibGljIG9uQ2hhbmdlKCkge1xuICAgIHRoaXMucmVGb3JtYXRDYXJkTnVtYmVyKCk7XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdpbnB1dCcpXG4gIHB1YmxpYyBvbklucHV0KCkge1xuICAgIHRoaXMucmVGb3JtYXRDYXJkTnVtYmVyKCk7XG4gICAgdGhpcy5zZXRDYXJkVHlwZSgpO1xuICB9XG5cbiAgcHJpdmF0ZSBmb3JtYXRDYXJkTnVtYmVyKGU6IEtleWJvYXJkRXZlbnQpIHtcbiAgICBjb25zdCBkaWdpdCA9IFN0cmluZy5mcm9tQ2hhckNvZGUoZS53aGljaCk7XG4gICAgaWYgKCEvXlxcZCskLy50ZXN0KGRpZ2l0KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHZhbHVlID0gdGhpcy50YXJnZXQudmFsdWU7XG4gICAgY29uc3QgY2FyZCA9IENyZWRpdENhcmQuY2FyZEZyb21OdW1iZXIodmFsdWUgKyBkaWdpdCk7XG4gICAgY29uc3QgbGVuZ3RoID0gKHZhbHVlLnJlcGxhY2UoL1xcRC9nLCAnJykgKyBkaWdpdCkubGVuZ3RoO1xuICAgIGNvbnN0IHVwcGVyTGVuZ3RoID0gY2FyZCA/IGNhcmQubGVuZ3RoW2NhcmQubGVuZ3RoLmxlbmd0aCAtIDFdIDogMTk7XG5cbiAgICBpZiAobGVuZ3RoID49IHVwcGVyTGVuZ3RoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBmb3JtYXRCYWNrQ2FyZE51bWJlcihlOiBLZXlib2FyZEV2ZW50KSB7XG4gICAgY29uc3QgdmFsdWUgPSB0aGlzLnRhcmdldC52YWx1ZTtcbiAgICBjb25zdCBzZWxTdGFydCA9IHRoaXMudGFyZ2V0LnNlbGVjdGlvblN0YXJ0O1xuXG4gICAgaWYgKGUud2hpY2ggIT09IDgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoc2VsU3RhcnQgIT0gbnVsbFxuICAgICAgJiYgc2VsU3RhcnQgPT09IHRoaXMudGFyZ2V0LnNlbGVjdGlvbkVuZFxuICAgICAgJiYgc2VsU3RhcnQgPiAwXG4gICAgICAmJiBzZWxTdGFydCAhPT0gdmFsdWUubGVuZ3RoXG4gICAgICAmJiB2YWx1ZVtzZWxTdGFydCAtIDFdID09PSAnICcpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGlmIChzZWxTdGFydCA8PSAyKSB7XG4gICAgICAgIHRoaXMudXBkYXRlVmFsdWUodmFsdWUuc2xpY2Uoc2VsU3RhcnQpKTtcbiAgICAgICAgdGhpcy50YXJnZXQuc2VsZWN0aW9uU3RhcnQgPSAwO1xuICAgICAgICB0aGlzLnRhcmdldC5zZWxlY3Rpb25FbmQgPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy51cGRhdGVWYWx1ZSh2YWx1ZS5zbGljZSgwLCBzZWxTdGFydCAtIDIpICsgdmFsdWUuc2xpY2Uoc2VsU3RhcnQpKTtcbiAgICAgICAgdGhpcy50YXJnZXQuc2VsZWN0aW9uU3RhcnQgPSBzZWxTdGFydCAtIDI7XG4gICAgICAgIHRoaXMudGFyZ2V0LnNlbGVjdGlvbkVuZCA9IHNlbFN0YXJ0IC0gMjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHNldENhcmRUeXBlKCkge1xuICAgIGNvbnN0IGNhcmRUeXBlID0gQ3JlZGl0Q2FyZC5jYXJkVHlwZSh0aGlzLnRhcmdldC52YWx1ZSkgfHwgJ3Vua25vd24nO1xuXG4gICAgdGhpcy5yZXNvbHZlZFNjaGVtZSQubmV4dChjYXJkVHlwZSk7XG5cbiAgICBpZiAoIXRoaXMudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhjYXJkVHlwZSkpIHtcbiAgICAgIHRoaXMuY2FyZHMuZm9yRWFjaCgoY2FyZCkgPT4ge1xuICAgICAgICB0aGlzLnRhcmdldC5jbGFzc0xpc3QucmVtb3ZlKGNhcmQudHlwZSk7XG4gICAgICB9KTtcblxuICAgICAgdGhpcy50YXJnZXQuY2xhc3NMaXN0LnJlbW92ZSgndW5rbm93bicpO1xuICAgICAgdGhpcy50YXJnZXQuY2xhc3NMaXN0LmFkZChjYXJkVHlwZSk7XG4gICAgICB0aGlzLnRhcmdldC5jbGFzc0xpc3QudG9nZ2xlKCdpZGVudGlmaWVkJywgY2FyZFR5cGUgIT09ICd1bmtub3duJyk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSByZUZvcm1hdENhcmROdW1iZXIoKSB7XG4gICAgY29uc3QgdmFsdWUgPSBDcmVkaXRDYXJkLmZvcm1hdENhcmROdW1iZXIoXG4gICAgICBDcmVkaXRDYXJkLnJlcGxhY2VGdWxsV2lkdGhDaGFycyh0aGlzLnRhcmdldC52YWx1ZSksXG4gICAgKTtcbiAgICBjb25zdCBvbGRWYWx1ZSA9IHRoaXMudGFyZ2V0LnZhbHVlO1xuICAgIGlmICh2YWx1ZSAhPT0gb2xkVmFsdWUpIHtcbiAgICAgIHRoaXMudGFyZ2V0LnNlbGVjdGlvblN0YXJ0ID0gdGhpcy50YXJnZXQuc2VsZWN0aW9uRW5kID0gQ3JlZGl0Q2FyZC5zYWZlVmFsKHZhbHVlLCB0aGlzLnRhcmdldCwgKHNhZmVWYWwgPT4ge1xuICAgICAgICB0aGlzLnVwZGF0ZVZhbHVlKHNhZmVWYWwpO1xuICAgICAgfSkpO1xuICAgIH1cbiAgfVxufVxuIl19