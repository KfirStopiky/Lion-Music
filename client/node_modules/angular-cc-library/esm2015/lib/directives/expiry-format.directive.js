import { Directive, ElementRef, HostListener, Optional, Self } from '@angular/core';
import { CreditCard } from '../credit-card';
import { NgControl } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/forms';
export class ExpiryFormatDirective {
    constructor(el, control) {
        this.el = el;
        this.control = control;
        this.target = this.el.nativeElement;
    }
    /**
     * Updates the value to target element, or FormControl if exists.
     * @param value New input value.
     */
    updateValue(value) {
        if (this.control) {
            this.control.control.setValue(value);
        }
        else {
            this.target.value = value;
        }
    }
    onKeypress(e) {
        if (CreditCard.restrictNumeric(e)) {
            if (CreditCard.restrictExpiry(e.which, this.target)) {
                this.formatExpiry(e);
                this.formatForwardSlashAndSpace(e);
                this.formatForwardExpiry(e);
            }
        }
        else {
            e.preventDefault();
            return false;
        }
    }
    onKeydown(e) {
        if (CreditCard.restrictNumeric(e) && CreditCard.restrictExpiry(e.which, this.target)) {
            this.formatBackExpiry(e);
        }
    }
    onChange() {
        this.reformatExpiry();
    }
    onInput() {
        this.reformatExpiry();
    }
    formatExpiry(e) {
        const digit = String.fromCharCode(e.which);
        const val = `${this.target.value}${digit}`;
        if (!/^\d+$/.test(digit)) {
            return;
        }
        if (/^\d$/.test(val) && (val !== '0' && val !== '1')) {
            e.preventDefault();
            this.updateValue(`0${val} / `);
        }
        else if (/^\d\d$/.test(val)) {
            e.preventDefault();
            const m1 = parseInt(val[0], 10);
            const m2 = parseInt(val[1], 10);
            if (m2 > 2 && m1 !== 0) {
                this.updateValue(`0${m1} / ${m2}`);
            }
            else {
                this.updateValue(`${val} / `);
            }
        }
    }
    formatForwardSlashAndSpace(e) {
        const which = String.fromCharCode(e.which);
        const val = this.target.value;
        if (!(which === '/' || which === ' ')) {
            return false;
        }
        if (/^\d$/.test(val) && val !== '0') {
            this.updateValue(`0${val} / `);
        }
    }
    formatForwardExpiry(e) {
        const digit = String.fromCharCode(e.which);
        const val = this.target.value;
        if (!/^\d+$/.test(digit) && /^\d\d$/.test(val)) {
            this.updateValue(this.target.value = `${val} / `);
        }
    }
    formatBackExpiry(e) {
        const val = this.target.valueOf;
        if (e.which !== 8) {
            return;
        }
        if ((this.target.selectionStart != null) && this.target.selectionStart !== val.length) {
            return;
        }
        if (/\d\s\/\s$/.test(val)) {
            e.preventDefault();
            this.updateValue(val.replace(/\d\s\/\s$/, ''));
        }
    }
    reformatExpiry() {
        const val = CreditCard.formatExpiry(CreditCard.replaceFullWidthChars(this.target.value));
        const oldVal = this.target.value;
        if (val !== oldVal) {
            this.target.selectionStart = this.target.selectionEnd = CreditCard.safeVal(val, this.target, (safeVal => {
                this.updateValue(safeVal);
            }));
        }
    }
}
ExpiryFormatDirective.ɵfac = function ExpiryFormatDirective_Factory(t) { return new (t || ExpiryFormatDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 10)); };
ExpiryFormatDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ExpiryFormatDirective, selectors: [["", "ccExp", ""]], hostBindings: function ExpiryFormatDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keypress", function ExpiryFormatDirective_keypress_HostBindingHandler($event) { return ctx.onKeypress($event); })("keydown", function ExpiryFormatDirective_keydown_HostBindingHandler($event) { return ctx.onKeydown($event); })("change", function ExpiryFormatDirective_change_HostBindingHandler() { return ctx.onChange(); })("input", function ExpiryFormatDirective_input_HostBindingHandler() { return ctx.onInput(); });
    } } });
ExpiryFormatDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: NgControl, decorators: [{ type: Self }, { type: Optional }] }
];
ExpiryFormatDirective.propDecorators = {
    onKeypress: [{ type: HostListener, args: ['keypress', ['$event'],] }],
    onKeydown: [{ type: HostListener, args: ['keydown', ['$event'],] }],
    onChange: [{ type: HostListener, args: ['change',] }],
    onInput: [{ type: HostListener, args: ['input',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExpiryFormatDirective, [{
        type: Directive,
        args: [{
                selector: '[ccExp]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.NgControl, decorators: [{
                type: Self
            }, {
                type: Optional
            }] }]; }, { onKeypress: [{
            type: HostListener,
            args: ['keypress', ['$event']]
        }], onKeydown: [{
            type: HostListener,
            args: ['keydown', ['$event']]
        }], onChange: [{
            type: HostListener,
            args: ['change']
        }], onInput: [{
            type: HostListener,
            args: ['input']
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,