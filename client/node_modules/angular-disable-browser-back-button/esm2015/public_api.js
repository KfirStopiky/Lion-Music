import * as tslib_1 from "tslib";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/router';
var BackButtonDisableModule_1;
import { NgModule, Injectable, Inject } from '@angular/core';
import { Router, NavigationEnd } from '@angular/router';
function _window() {
    return window;
}
let WindowRef = class WindowRef {
    get nativeWindow() {
        return _window();
    }
};
WindowRef.ɵfac = function WindowRef_Factory(t) { return new (t || WindowRef)(); };
WindowRef.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: WindowRef, factory: function (t) { return WindowRef.ɵfac(t); } });
export { WindowRef };
let BackButtonDisableModule = BackButtonDisableModule_1 = class BackButtonDisableModule {
    constructor(router, windowRef, preserveScrollPosition) {
        this.router = router;
        this.windowRef = windowRef;
        this.preserveScrollPosition = preserveScrollPosition;
        this.scrollX = 0;
        this.scrollY = 0;
        this.window = this.windowRef.nativeWindow;
        this.disableBackButton();
        this.addPopStateEventListener();
    }
    static forRoot(config) {
        return {
            ngModule: BackButtonDisableModule_1,
            providers: [
                {
                    provide: 'preserveScrollPosition',
                    useValue: config && 'preserveScrollPosition' in config ? config.preserveScrollPosition : false
                }
            ]
        };
    }
    addPopStateEventListener() {
        this.window.addEventListener('popstate', () => {
            if (this.preserveScrollPosition)
                this.getScrollCoordinates();
            this.window.history.pushState(null, null, null);
            if (this.preserveScrollPosition)
                setTimeout(this.scrollToThePreviousPosition.bind(this));
        });
    }
    scrollToThePreviousPosition() {
        this.window.scrollTo(this.scrollX, this.scrollY);
    }
    getScrollCoordinates() {
        this.scrollX = this.window.scrollX;
        this.scrollY = this.window.scrollY;
    }
    disableBackButton() {
        this.window.history.pushState(null, null, null);
        this.router.events.subscribe(event => {
            if (event instanceof NavigationEnd) {
                this.window.history.pushState(null, null, null);
            }
            ;
        });
    }
};
BackButtonDisableModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: BackButtonDisableModule });
BackButtonDisableModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function BackButtonDisableModule_Factory(t) { return new (t || BackButtonDisableModule)(ɵngcc0.ɵɵinject(ɵngcc1.Router), ɵngcc0.ɵɵinject(WindowRef), ɵngcc0.ɵɵinject('preserveScrollPosition')); }, providers: [WindowRef] });
BackButtonDisableModule.ctorParameters = () => [
    { type: Router },
    { type: WindowRef },
    { type: Boolean, decorators: [{ type: Inject, args: ['preserveScrollPosition',] }] }
];
BackButtonDisableModule = BackButtonDisableModule_1 = tslib_1.__decorate([ tslib_1.__param(2, Inject('preserveScrollPosition'))
], BackButtonDisableModule);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(WindowRef, [{
        type: Injectable
    }], null, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BackButtonDisableModule, [{
        type: NgModule,
        args: [{
                providers: [WindowRef]
            }]
    }], function () { return [{ type: ɵngcc1.Router }, { type: WindowRef }, { type: Boolean, decorators: [{
                type: Inject,
                args: ['preserveScrollPosition']
            }] }]; }, null); })();
export { BackButtonDisableModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVibGljX2FwaS5qcyIsInNvdXJjZXMiOlsiYW5ndWxhci1kaXNhYmxlLWJyb3dzZXItYmFjay1idXR0b24vcHVibGljX2FwaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQXVCLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNsRixPQUFPLEVBQUUsTUFBTSxFQUFFLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRXhELFNBQVMsT0FBTztBQUFLLElBQ25CLE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUM7QUFHRCxJQUFhLFNBQVMsR0FBdEIsTUFBYSxTQUFTO0FBQ3RCLElBQUUsSUFBSSxZQUFZO0FBQUssUUFDbkIsT0FBTyxPQUFPLEVBQUUsQ0FBQztBQUNyQixJQUFFLENBQUM7QUFDSCxDQUFDLENBQUE7QUFKWSxTQUFTLDRCQURyQixVQUFVLEVBQUUsSUFDQSxTQUFTLENBSXJCO3VIQUNEO0FBQ0EsU0FOYSxTQUFTO0FBU3RCLElBQWEsdUJBQXVCLCtCQUFwQyxNQUFhLHVCQUF1QjtBQUNwQyxJQUtFLFlBQ1UsTUFBYyxFQUNkLFNBQW9CLEVBQ2Msc0JBQStCO0FBQzFFLFFBSFMsV0FBTSxHQUFOLE1BQU0sQ0FBUTtBQUFDLFFBQ2YsY0FBUyxHQUFULFNBQVMsQ0FBVztBQUFDLFFBQ2EsMkJBQXNCLEdBQXRCLHNCQUFzQixDQUFTO0FBQzdFLFFBUFUsWUFBTyxHQUFHLENBQUMsQ0FBQztBQUN0QixRQUFVLFlBQU8sR0FBRyxDQUFDLENBQUM7QUFDdEIsUUFNSSxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFBO0FBQzdDLFFBQUksSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7QUFDN0IsUUFBSSxJQUFJLENBQUMsd0JBQXdCLEVBQUUsQ0FBQztBQUNwQyxJQUFFLENBQUM7QUFDSCxJQUNFLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBNEM7QUFBSSxRQUM3RCxPQUFPO0FBQ1gsWUFBTSxRQUFRLEVBQUUseUJBQXVCO0FBQ3ZDLFlBQU0sU0FBUyxFQUFFO0FBQ2pCLGdCQUFRO0FBQ1Isb0JBQVUsT0FBTyxFQUFFLHdCQUF3QjtBQUMzQyxvQkFBVSxRQUFRLEVBQUUsTUFBTSxJQUFJLHdCQUF3QixJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLHNCQUFzQixDQUFDLENBQUMsQ0FBQyxLQUFLO0FBQ3hHLGlCQUFTO0FBQ1QsYUFBTztBQUNQLFNBQUssQ0FBQTtBQUNMLElBQUUsQ0FBQztBQUNILElBQ1Usd0JBQXdCO0FBQUssUUFDbkMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLEVBQUUsR0FBRyxFQUFFO0FBQ2xELFlBQU0sSUFBSSxJQUFJLENBQUMsc0JBQXNCO0FBQUUsZ0JBQUEsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7QUFDbkUsWUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztBQUN0RCxZQUFNLElBQUksSUFBSSxDQUFDLHNCQUFzQjtBQUFFLGdCQUFBLFVBQVUsQ0FBQyxJQUFJLENBQUMsMkJBQTJCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDL0YsUUFBSSxDQUFDLENBQUMsQ0FBQztBQUNQLElBQUUsQ0FBQztBQUNILElBQ1UsMkJBQTJCO0FBQUssUUFDdEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDckQsSUFBRSxDQUFDO0FBQ0gsSUFDVSxvQkFBb0I7QUFBSyxRQUMvQixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDO0FBQ3ZDLFFBQUksSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQztBQUN2QyxJQUFFLENBQUM7QUFDSCxJQUNVLGlCQUFpQjtBQUFLLFFBQzVCLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ3BELFFBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQ3pDLFlBQU0sSUFBSSxLQUFLLFlBQVksYUFBYSxFQUFFO0FBQzFDLGdCQUFRLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ3hELGFBQU87QUFBQyxZQUFELENBQUM7QUFDUixRQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ1AsSUFBRSxDQUFDO0FBQ0gsQ0FBQzs7K1JBQUE7QUFDRDtBQUFpRCxZQS9DN0IsTUFBTTtBQUN4QixZQUFxQixTQUFTO0FBQzlCLDBDQUFHLE1BQU0sU0FBQyx3QkFBd0I7QUFBUTtBQVQvQix1QkFBdUIsd0RBSG5DLFFBQVEsQ0FBQyxVQUNSLFNBQVMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxNQUN2QixDQUFDLHJEQUNFLENBU0MsbUJBQUEsTUFBTSxDQUFDLHdCQUF3QixDQUFDLENBQUE7QUFBQyxHQVR6Qix1QkFBdUIsQ0FxRG5DOzs7Ozs7Ozs7Ozs7a0NBQ0Q7QUFBQyxTQXREWSx1QkFBdUI7QUFFcEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSwgSW5qZWN0YWJsZSwgTW9kdWxlV2l0aFByb3ZpZGVycywgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSb3V0ZXIsIE5hdmlnYXRpb25FbmQgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuXG5mdW5jdGlvbiBfd2luZG93KCk6IGFueSB7XG4gIHJldHVybiB3aW5kb3c7XG59XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBXaW5kb3dSZWYge1xuICBnZXQgbmF0aXZlV2luZG93KCk6IGFueSB7XG4gICAgcmV0dXJuIF93aW5kb3coKTtcbiAgfVxufVxuXG5ATmdNb2R1bGUoe1xuICBwcm92aWRlcnM6IFtXaW5kb3dSZWZdXG59KVxuZXhwb3J0IGNsYXNzIEJhY2tCdXR0b25EaXNhYmxlTW9kdWxlIHtcblxuICBwcml2YXRlIHdpbmRvdzogV2luZG93O1xuICBwcml2YXRlIHNjcm9sbFggPSAwO1xuICBwcml2YXRlIHNjcm9sbFkgPSAwO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcm91dGVyOiBSb3V0ZXIsXG4gICAgcHJpdmF0ZSB3aW5kb3dSZWY6IFdpbmRvd1JlZixcbiAgICBASW5qZWN0KCdwcmVzZXJ2ZVNjcm9sbFBvc2l0aW9uJykgcHJpdmF0ZSBwcmVzZXJ2ZVNjcm9sbFBvc2l0aW9uOiBib29sZWFuXG4gICkge1xuICAgIHRoaXMud2luZG93ID0gdGhpcy53aW5kb3dSZWYubmF0aXZlV2luZG93XG4gICAgdGhpcy5kaXNhYmxlQmFja0J1dHRvbigpO1xuICAgIHRoaXMuYWRkUG9wU3RhdGVFdmVudExpc3RlbmVyKCk7XG4gIH1cblxuICBzdGF0aWMgZm9yUm9vdChjb25maWc/OiB7IHByZXNlcnZlU2Nyb2xsUG9zaXRpb246IGJvb2xlYW4gfSk6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogQmFja0J1dHRvbkRpc2FibGVNb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6ICdwcmVzZXJ2ZVNjcm9sbFBvc2l0aW9uJyxcbiAgICAgICAgICB1c2VWYWx1ZTogY29uZmlnICYmICdwcmVzZXJ2ZVNjcm9sbFBvc2l0aW9uJyBpbiBjb25maWcgPyBjb25maWcucHJlc2VydmVTY3JvbGxQb3NpdGlvbiA6IGZhbHNlXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGFkZFBvcFN0YXRlRXZlbnRMaXN0ZW5lcigpOiB2b2lkIHtcbiAgICB0aGlzLndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsICgpID0+IHtcbiAgICAgIGlmICh0aGlzLnByZXNlcnZlU2Nyb2xsUG9zaXRpb24pIHRoaXMuZ2V0U2Nyb2xsQ29vcmRpbmF0ZXMoKTtcbiAgICAgIHRoaXMud2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKG51bGwsIG51bGwsIG51bGwpO1xuICAgICAgaWYgKHRoaXMucHJlc2VydmVTY3JvbGxQb3NpdGlvbikgc2V0VGltZW91dCh0aGlzLnNjcm9sbFRvVGhlUHJldmlvdXNQb3NpdGlvbi5iaW5kKHRoaXMpKTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgc2Nyb2xsVG9UaGVQcmV2aW91c1Bvc2l0aW9uKCk6IHZvaWQge1xuICAgIHRoaXMud2luZG93LnNjcm9sbFRvKHRoaXMuc2Nyb2xsWCwgdGhpcy5zY3JvbGxZKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0U2Nyb2xsQ29vcmRpbmF0ZXMoKTogdm9pZCB7XG4gICAgdGhpcy5zY3JvbGxYID0gdGhpcy53aW5kb3cuc2Nyb2xsWDtcbiAgICB0aGlzLnNjcm9sbFkgPSB0aGlzLndpbmRvdy5zY3JvbGxZO1xuICB9XG5cbiAgcHJpdmF0ZSBkaXNhYmxlQmFja0J1dHRvbigpOiB2b2lkIHtcbiAgICB0aGlzLndpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZShudWxsLCBudWxsLCBudWxsKTtcbiAgICB0aGlzLnJvdXRlci5ldmVudHMuc3Vic2NyaWJlKGV2ZW50ID0+IHtcbiAgICAgIGlmIChldmVudCBpbnN0YW5jZW9mIE5hdmlnYXRpb25FbmQpIHtcbiAgICAgICAgdGhpcy53aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUobnVsbCwgbnVsbCwgbnVsbCk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG59XG4iXX0=