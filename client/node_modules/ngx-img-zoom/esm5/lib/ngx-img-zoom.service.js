/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
var NgxImgZoomService = /** @class */ (function () {
    function NgxImgZoomService() {
        this.zoomMode = 0 /* HoverZoom */;
    }
    // setZoomMode(zoomMode) {
    //   this.zoomMode = zoomMode;
    // }
    // setZoomMode(zoomMode) {
    //   this.zoomMode = zoomMode;
    // }
    /**
     * @param {?} breakPoints
     * @return {?}
     */
    NgxImgZoomService.prototype.setZoomBreakPoints = 
    // setZoomMode(zoomMode) {
    //   this.zoomMode = zoomMode;
    // }
    /**
     * @param {?} breakPoints
     * @return {?}
     */
    function (breakPoints) {
        this.zoomBreakPoints = breakPoints;
    };
    /** @nocollapse */
    NgxImgZoomService.ctorParameters = function () { return []; };
NgxImgZoomService.ɵfac = function NgxImgZoomService_Factory(t) { return new (t || NgxImgZoomService)(); };
NgxImgZoomService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NgxImgZoomService, factory: function (t) { return NgxImgZoomService.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxImgZoomService, [{
        type: Injectable
    }], function () { return []; }, null); })();
    return NgxImgZoomService;
}());
export { NgxImgZoomService };
if (false) {
    /** @type {?} */
    NgxImgZoomService.prototype.zoomMode;
    /** @type {?} */
    NgxImgZoomService.prototype.zoomBreakPoints;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWltZy16b29tLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIm5neC1pbWctem9vbS9saWIvbmd4LWltZy16b29tLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBRzNDO0FBRU0sSUFFSjtBQUVVLFFBSlYsYUFBUSxxQkFBNEI7QUFDdEMsSUFDa0IsQ0FBQztBQUNuQixJQUNFLDBCQUEwQjtBQUM1QixJQUFFLDhCQUE4QjtBQUNoQyxJQUFFLElBQUk7QUFDTjtBQUM4QjtBQUNEO0FBQVM7QUFHdEM7QUFBOEI7QUFBbUI7QUFBUSxJQUp2RCw4Q0FBa0I7QUFBSTtBQUNMO0FBR1g7QUFBUztBQUFRO0FBQThCO0FBQW1CO0FBQVEsSUFKaEYsVUFBbUIsV0FBVztBQUNoQyxRQUFJLElBQUksQ0FBQyxlQUFlLEdBQUcsV0FBVyxDQUFDO0FBQ3ZDLElBQUUsQ0FBQyxDQVhHO0FBQUM7OEJBRE4sVUFBVSx4Q0FDbUI7Ozs7O2dEQUd6QjtBQUFDLElBU04sd0JBQUM7QUFDQSxDQURBLEFBYkQsSUFhQztBQUNELFNBYmEsaUJBQWlCO0FBQzdCO0FBQWE7QUFBcUIsSUFBakMscUNBQW9DO0FBQ3RDO0FBQ0UsSUFEQSw0Q0FBZ0I7QUFDbEI7QUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5neEltZ1pvb21Nb2RlIH0gZnJvbSAnLi9tb2RlLmVudW0nO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTmd4SW1nWm9vbVNlcnZpY2Uge1xuICB6b29tTW9kZSA9IE5neEltZ1pvb21Nb2RlLkhvdmVyWm9vbTtcbiAgem9vbUJyZWFrUG9pbnRzO1xuICBjb25zdHJ1Y3RvcigpIHsgfVxuXG4gIC8vIHNldFpvb21Nb2RlKHpvb21Nb2RlKSB7XG4gIC8vICAgdGhpcy56b29tTW9kZSA9IHpvb21Nb2RlO1xuICAvLyB9XG5cbiAgc2V0Wm9vbUJyZWFrUG9pbnRzKGJyZWFrUG9pbnRzKSB7XG4gICAgdGhpcy56b29tQnJlYWtQb2ludHMgPSBicmVha1BvaW50cztcbiAgfVxufVxuIl19